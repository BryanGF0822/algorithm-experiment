package main

import (
	"fmt"
	"time"
)

func main() {
	var arr1 = [...]int{87, 97, 26, 94, 78, 1, 97, 88, 6, 60, 75, 79, 14, 77, 92, 99, 11, 99, 47, 86, 42, 8, 53, 19, 75, 61, 76, 39, 5, 3, 89, 72, 34, 61, 79, 10, 55, 30, 87, 71, 84, 14, 61, 41, 34, 17, 33, 91, 31, 28, 55, 39, 92, 25, 80, 4, 94, 1, 1, 65, 2, 37, 7, 53, 59, 27, 58, 41, 10, 19, 16, 31, 49, 86, 73, 72, 14, 2, 40, 75, 90, 44, 17, 5, 26, 79, 71, 53, 14, 94, 50, 30, 25, 58, 77, 7, 33, 10, 78, 71}

	var arr2 = [...]int{932, 485, 894, 36, 839, 290, 268, 805, 846, 93, 981, 979, 490, 71, 998, 840, 467, 54, 299, 518, 773, 425, 783, 799, 494, 559, 190, 359, 283, 541, 671, 198, 426, 634, 885, 654, 595, 665, 237, 277, 623, 27, 601, 495, 779, 246, 67, 316, 326, 413, 870, 713, 493, 725, 93, 878, 863, 2, 95, 787, 588, 148, 234, 800, 802, 601, 716, 247, 135, 976, 601, 992, 42, 231, 967, 529, 221, 562, 149, 152, 443, 945, 682, 919, 255, 372, 417, 362, 205, 62, 274, 759, 577, 731, 180, 91, 357, 30, 103, 5, 89, 420, 630, 585, 507, 527, 305, 828, 382, 880, 705, 943, 70, 996, 636, 706, 417, 770, 848, 950, 529, 118, 812, 742, 455, 69, 434, 739, 497, 141, 281, 483, 668, 288, 831, 574, 21, 830, 988, 84, 912, 811, 841, 166, 644, 996, 151, 584, 302, 665, 509, 479, 546, 80, 313, 405, 816, 742, 343, 254, 258, 42, 431, 541, 820, 200, 793, 848, 228, 167, 636, 878, 737, 352, 284, 481, 656, 11, 521, 699, 618, 327, 748, 793, 537, 806, 253, 886, 721, 123, 23, 54, 35, 169, 709, 376, 549, 169, 646, 374, 181, 975, 284, 92, 524, 570, 715, 627, 287, 350, 428, 297, 841, 296, 809, 303, 237, 925, 659, 119, 6, 799, 343, 527, 817, 622, 303, 158, 634, 894, 884, 370, 940, 642, 329, 884, 349, 398, 396, 385, 213, 857, 589, 229, 967, 815, 121, 782, 255, 905, 536, 2, 828, 607, 386, 822, 79, 700, 392, 757, 465, 20, 743, 753, 124, 517, 887, 881, 352, 70, 337, 238, 765, 840, 784, 587, 344, 824, 471, 546, 862, 630, 504, 685, 517, 574, 908, 255, 778, 617, 22, 728, 29, 214, 161, 934, 129, 90, 874, 639, 768, 785, 977, 640, 84, 271, 249, 320, 111, 352, 559, 110, 852, 120, 479, 587, 670, 401, 809, 638, 894, 703, 43, 499, 258, 785, 200, 246, 353, 886, 502, 50, 531, 944, 997, 385, 157, 450, 939, 150, 426, 226, 677, 463, 821, 755, 792, 232, 420, 627, 414, 406, 646, 867, 212, 754, 828, 544, 679, 541, 485, 412, 142, 398, 316, 274, 131, 349, 909, 589, 548, 539, 941, 243, 822, 344, 238, 459, 73, 937, 121, 448, 526, 652, 390, 881, 948, 857, 887, 79, 866, 231, 4, 226, 423, 199, 623, 224, 982, 113, 175, 267, 758, 594, 362, 542, 525, 623, 562, 164, 620, 248, 635, 869, 605, 84, 595, 453, 473, 516, 311, 811, 614, 759, 431, 171, 821, 818, 304, 896, 530, 465, 616, 162, 253, 23, 438, 903, 822, 422, 518, 50, 469, 427, 204, 797, 351, 185, 201, 315, 733, 432, 593, 751, 318, 257, 965, 858, 892, 202, 475, 549, 140, 385, 443, 884, 431, 38, 797, 787, 942, 657, 654, 712, 618, 549, 98, 236, 409, 824, 947, 375, 765, 312, 71, 567, 438, 819, 351, 437, 112, 226, 172, 388, 7, 612, 213, 151, 510, 3, 619, 405, 240, 845, 461, 51, 398, 834, 495, 255, 310, 892, 901, 957, 844, 447, 686, 480, 547, 839, 132, 358, 540, 809, 335, 584, 871, 935, 25, 117, 647, 331, 684, 482, 632, 206, 896, 848, 420, 766, 673, 274, 946, 450, 548, 977, 832, 195, 722, 925, 119, 498, 598, 859, 797, 384, 648, 350, 945, 877, 364, 171, 742, 360, 268, 693, 34, 800, 530, 241, 561, 973, 658, 255, 986, 902, 668, 798, 139, 776, 127, 755, 616, 551, 57, 662, 567, 692, 299, 697, 31, 643, 881, 229, 951, 416, 288, 146, 819, 606, 567, 419, 976, 491, 200, 333, 169, 28, 536, 154, 354, 864, 178, 277, 66, 555, 706, 988, 414, 394, 652, 149, 287, 869, 413, 503, 950, 622, 290, 246, 942, 525, 13, 98, 583, 661, 190, 981, 731, 399, 917, 543, 489, 504, 957, 816, 767, 402, 324, 25, 365, 580, 136, 311, 693, 575, 460, 885, 790, 542, 935, 245, 367, 192, 717, 858, 496, 294, 935, 629, 933, 595, 430, 898, 716, 629, 941, 999, 853, 511, 468, 521, 33, 176, 985, 850, 755, 628, 25, 563, 268, 44, 380, 769, 403, 548, 694, 975, 232, 474, 425, 112, 489, 398, 136, 304, 302, 82, 639, 398, 839, 703, 430, 784, 518, 121, 316, 59, 871, 169, 736, 140, 236, 341, 795, 152, 812, 925, 121, 461, 291, 925, 15, 267, 925, 650, 422, 627, 164, 307, 797, 234, 402, 430, 917, 801, 424, 907, 349, 405, 380, 913, 678, 694, 905, 83, 145, 382, 937, 591, 453, 599, 133, 475, 644, 425, 181, 396, 405, 96, 490, 892, 908, 94, 17, 263, 573, 306, 603, 194, 609, 548, 111, 457, 983, 571, 673, 156, 803, 390, 843, 461, 564, 987, 777, 976, 478, 879, 211, 407, 408, 955, 108, 777, 929, 943, 416, 519, 684, 885, 602, 19, 922, 349, 842, 237, 598, 409, 470, 3, 307, 780, 952, 972, 58, 716, 333, 617, 16, 416, 293, 320, 644, 304, 630, 855, 54, 680, 315, 842, 419, 520, 306, 896, 397, 747, 35, 488, 576, 850, 637, 820, 319, 949, 155, 7, 916, 525, 611, 152, 854, 64, 926, 51, 637, 906, 507, 400, 249, 749, 143, 979, 160, 221, 111, 111, 255, 171, 590, 271, 368, 707, 25, 523, 937, 12, 240, 395, 997, 579, 23, 827, 284, 316, 555, 411, 718, 407, 696, 954, 940, 947, 502, 815, 767, 42, 813, 491, 634, 280, 517, 550, 290, 880, 624, 284, 231, 757, 867, 516, 186, 970, 807, 805, 710, 504, 998, 469, 915, 106, 937, 48, 173, 517, 639, 889, 923, 889, 863, 480, 852, 182, 646, 168, 924, 141, 708, 844, 243, 349, 201, 69, 687, 255, 933, 642, 664, 598, 293, 589, 153, 974, 346, 366, 407, 560, 171, 695, 729, 527, 394, 50, 687, 930, 940, 586, 343, 310, 514, 981, 675, 239, 797, 307, 127, 604, 647, 31, 414, 332, 132, 438, 548, 808, 214, 640, 885, 671, 352, 826}
	fmt.Println("Insertion 1")
	for i := 0; i < 100; i++ {
		startInsertion1 := time.Now()
		insertionSort(arr1)
		durationInsertion1 := time.Since(startInsertion1)
		fmt.Println(durationInsertion1.Milliseconds())
	}
	fmt.Println("------------------------------------------------------")
	fmt.Println("Insertion 2")
	for i := 0; i < 100; i++ {
		startInsertion2 := time.Now()
		insertionSort2(arr2)
		durationInsertion2 := time.Since(startInsertion2)
		fmt.Println(durationInsertion2.Milliseconds())
	}
	fmt.Println("------------------------------------------------------")
	fmt.Println("Bubble 1")
	for i := 0; i < 100; i++ {
		startBubble1 := time.Now()
		bubbleSort(arr1)
		durationBubble1 := time.Since(startBubble1)
		fmt.Println(durationBubble1.Milliseconds())
	}
	fmt.Println("------------------------------------------------------")
	fmt.Println("Bubble 2")
	for i := 0; i < 100; i++ {
		startBubble2 := time.Now()
		bubbleSort2(arr2)
		durationBubble2 := time.Since(startBubble2)
		fmt.Println(durationBubble2.Milliseconds())
	}

}

//based on: https://www.youtube.com/watch?v=vg4GS4LSJXI
func insertionSort(A [100]int) [100]int {
	for j := 0; j < len(A); j++ {
		key := A[j]
		i := j - 1
		for i > -1 && A[i] > key {
			A[i+1] = A[i]
			i -= 1
		}
		A[i+1] = key
	}
	return A
}

func insertionSort2(A [1000]int) [1000]int {
	for j := 0; j < len(A); j++ {
		key := A[j]
		i := j - 1
		for i > -1 && A[i] > key {
			A[i+1] = A[i]
			i -= 1
		}
		A[i+1] = key
	}
	return A
}

//Based on: https://tutorialedge.net/courses/go-algorithms-course/21-bubble-sort-in-go/
func bubbleSort(input [100]int) [100]int {
	n := len(input)
	swapped := true
	for swapped {

		swapped = false

		for i := 0; i < n-1; i++ {

			if input[i] > input[i+1] {

				input[i], input[i+1] = input[i+1], input[i]

				swapped = true
			}
		}
	}
	return input
}

func bubbleSort2(input [1000]int) [1000]int {
	n := len(input)
	swapped := true
	for swapped {

		swapped = false

		for i := 0; i < n-1; i++ {

			if input[i] > input[i+1] {

				input[i], input[i+1] = input[i+1], input[i]

				swapped = true
			}
		}
	}
	return input
}
